acc <- c(1, 1, 1, 1, 1, 1, 1, 1,
0.75, 0.75, 0.5, 0.75, 0.75, 0.75,
1, 0.5, 1, 0.75, 0.75, 0.5,
1, 0.75, 0.5, 0.5, 0, 0.5,
0.5, 0, 0.5, 0.5, 0.75, 0.5,
0.5, 0.5, 0.75, 0.5, 0, 0.5, 0)
score <- c(5.00, 4.88, 4.75, 4.71, 4.71, 4.64, 4.57, 4.43,
4.29, 4.29, 4.26, 4.21, 4.21, 4.21, 4.14, 4.14,
4.13, 4.00, 4.00, 3.97, 3.88, 3.86, 3.86, 3.83,
3.71, 3.57, 3.57, 3.57, 3.54, 3.54, 3.43, 3.29,
3.21, 3.19, 3.14, 3.14, 3.14, 3.14, 3.00)
invite <- c(1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 1, 1, 1, 0.5, 1, 1,
1, 1, 0.5, 1, 0.5, 1, 0.5, 0.75,
1, 1, 1, 1, 1, 0.5, 1, 0.5,
0.5, 0.5, 0.75, 1, 1, 1, 1)
cv <- c(2.83, 4.17, 3.00, 2.83, 3.67, 4.33, 3.60, 3.58,
3.50, 3.42, 2.80, 3.70, 3.17, 3.67, 3.00, 3.00,
3.67, 4.17, 3.17, 3.83, 3.67, 3.50, 3.50, 3.50,
3.67, 3.67, 3.67, 4.00, 3.83, 3.00, 3.33, 3.33,
2.75, 3.17, 2.92, 3.83, 3.00, 3.42, 3.50)
plot(acc,score)
table(acc,invite)
plot(cv,acc)
cor(cv,acc)
acc <- c(1, 1, 1, 1, 1, 1, 1, 1,
0.75, 0.75, 0.5, 0.75, 0.75, 0.75,
1, 0.5, 1, 0.75, 0.75, 0.5,
1, 0.75, 0.5, 0.5, 0, 0.5,
0.5, 0, 0.5, 0.5, 0.75, 0.5,
0.5, 0.5, 0.75, 0.5, 0, 0.5, 0,0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0)
score <- c(5.00, 4.88, 4.75, 4.71, 4.71, 4.64, 4.57, 4.43,
4.29, 4.29, 4.26, 4.21, 4.21, 4.21, 4.14, 4.14,
4.13, 4.00, 4.00, 3.97, 3.88, 3.86, 3.86, 3.83,
3.71, 3.57, 3.57, 3.57, 3.54, 3.54, 3.43, 3.29,
3.21, 3.19, 3.14, 3.14, 3.14, 3.14, 3.00,2.86, 2.71, 2.29, 2.29, 2.00, 1.86, 1.71, 1.43,
1.40, 1.33, 1.29, 1.14, 1.00, 1.00, 0.00, 0.00)
invite <- c(1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 1, 1, 1, 0.5, 1, 1,
1, 1, 0.5, 1, 0.5, 1, 0.5, 0.75,
1, 1, 1, 1, 1, 0.5, 1, 0.5,
0.5, 0.5, 0.75, 1, 1, 1, 1,0.5, 0.5, 0.5, 1, 1, 1, 1, 1,
0.75, 1, 1, 0.5, 0.5, 1, 1, 0.5)
cv <- c(2.83, 4.17, 3.00, 2.83, 3.67, 4.33, 3.60, 3.58,
3.50, 3.42, 2.80, 3.70, 3.17, 3.67, 3.00, 3.00,
3.67, 4.17, 3.17, 3.83, 3.67, 3.50, 3.50, 3.50,
3.67, 3.67, 3.67, 4.00, 3.83, 3.00, 3.33, 3.33,
2.75, 3.17, 2.92, 3.83, 3.00, 3.42, 3.50,3.17, 3.00, 2.75, 3.57, 3.00, 2.83, 2.83, 3.25,
3.75, 2.83, 2.67, 2.29, 2.71, 3.29, 3.33, 3.33)
plot(acc,score)
table(acc,invite)
cor(cv,acc)
plot(cv,acc)
abline(lm(acc~cv))
plot(cv,score)
cor(cv,score)
abline(lm(score~cv))
plot(acc,score)
plot(acc,score,col=round(acc))
plot(acc,score,col=round(acc)+1)
colo <- c(rep(1,40),rep(2,55)
plot(acc,score,col=colo)
length(acc)
colo <- c(rep(1,40),rep(2,15)
table(acc,invite)
colo <- c(rep(1,40),rep(2,15)
)
colo <- c(rep(1,40),rep(2,15))
plot(acc,score,col=colo)
curve(dnorm(0,1))
curve(pnorm(0,1))
curve(dnorm(x), from = -4, to = 4,
main = "Standard Normal Density",
ylab = "Density")
curve(dnorm(x)+.5, from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density")
abline(v=c(0,.5))
curve(dnorm(x+.5), from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density")
abline(v=c(0,.5))
curve(dnorm(x,mu=.5), from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density")
?dnorm
curve(dnorm(x,mean=.5), from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density")
abline(v=c(0,.5))
curve(dnorm(x,mean=.5), from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density",
xlab=expression(delta[alpha]),axis=F)
curve(dnorm(x,mean=.5), from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density",
xlab=expression(delta[alpha]),axes=F)
axis(1);axis(2)
abline(v=c(0,.5))
abline(v=c(0,.5),lty=c(2,1))
curve(dnorm(x,mean=.5), from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density",
xlab=expression(delta[alpha]),axes=F)
axis(1);axis(2)
abline(v=c(0,.5),lty=c(2,1))
pdf("c:/holger/tagungen/2025/smip/densalpha.pdf",width=5,height=5)
pdf("c:/holger/tagungen/2025/Mannheim_keynote/densalpha.pdf",width=5,height=5)
curve(dnorm(x,mean=.5), from = 0, to = 4,
main = "Standard Normal Density",
ylab = "Density",
xlab=expression(delta[alpha]),axes=F)
axis(1);axis(2)
abline(v=c(0,.5),lty=c(2,1))
dev.off()
pdf("c:/holger/tagungen/2025/Mannheim_keynote/densalpha.pdf",width=5,height=5)
curve(dnorm(x,mean=.5), from = 0, to = 4,
main = "",
ylab = "Density",
xlab=expression(delta[alpha]),axes=F)
axis(1);axis(2)
abline(v=c(0,.5),lty=c(2,1))
dev.off()
4131)
plot(c(214,
872,
2134,
4131))
verb <- c(214,
872,
2134,
4131)
verb[2:4]-verb[1:3]
verb <- c(214,
872,
2134,
4131,5722)
verb[2:5]-verb[1:4]
plot(verb[2:5]-verb[1:4])
147,15+185,72/12
147.15+185.72/12
185.72/12
6000*29,37/100+200
6000*29.37/100+200
6000*32.95/100+16.24*12
6000*32.95/100+16.24*12-232
6000*30.35/100+12.50*12
model1_plots <- readRDS("C:/holger/SEM/dsemtutorialoffline/results_illustration05_factorscores.RDS")
fscores_illu5 <- model1_plots$BUGSoutput$summary
saveRDS(fscores_illu5,"05_dlcsem/results/results_illustration05_factorscores.RDS")
fscores_illu5
setwd("c:/holger/sem/dsem_tutorial")
saveRDS(fscores_illu5,"05_dlcsem/results/results_illustration05_factorscores.RDS")
################################################################################
# DATA preparation
################################################################################
dat <- readRDS(here::here("data", "finalcompletedata.RDS"))
y_data <- dat$data
# Save the number participants (N=57)
num_obs <- dim(y_data)[1]
# Save the number of time points (num_time=15)
num_time <- dim(y_data)[2]
# Prepare data for one factor
data_3factor <- list(
N = num_obs, # sample size
Nt = num_time, # time points
y = y_data, # responses to all items, jags file uses 4:12
psi0 = diag(3), # hyperprior wishart distribution
mu.zeta2 = rep(0, 3)  # hyperprior multivariate normal distribution
)
# Define parameters to estimate for plotting
params_model1_plots <- c(
"eta.S1", "eta.S2", "PS", "S"
)
# Re-run jags model for items 10-12 (all BAI indicators)
model1_opposite_plots <- jags.parallel(
data = data_3factor, # data to use
parameters.to.save = params_model1_plots, # output parameters
n.iter = 10000, # number of iterations
n.chains = 4, # number of chains
n.thin = 1, # number of iterations to skip
# for avoiding autocorrelation (in this case None)
n.burnin = 5000, # burn-in parameter
model.file = here::here("06_fusion/models/appendix",
"dlcsem_model1_3factor_ar1_2level-int_opposite.txt")
)
# Library needed to run the jags code
library(R2jags)
# Re-run jags model for items 10-12 (all BAI indicators)
model1_opposite_plots <- jags.parallel(
data = data_3factor, # data to use
parameters.to.save = params_model1_plots, # output parameters
n.iter = 10000, # number of iterations
n.chains = 4, # number of chains
n.thin = 1, # number of iterations to skip
# for avoiding autocorrelation (in this case None)
n.burnin = 5000, # burn-in parameter
model.file = here::here("06_fusion/models/appendix",
"dlcsem_model1_3factor_ar1_2level-int_opposite.txt")
)
saveRDS(fscores_opposite,"06_fusion/results/results_illustration06_factorscores_opposite.RDS")
fscores_opposite <- model1_opposite_plots$BUGSoutput$summary
saveRDS(fscores_opposite,"06_fusion/results/results_illustration06_factorscores_opposite.RDS")
#
